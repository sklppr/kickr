// Generated by CoffeeScript 1.7.1
(function() {
  var Table, app, data, express, io, server, tables, _ref;

  express = require("express");

  app = express();

  server = require("http").createServer(app);

  io = require("socket.io")(server);

  app.use(express["static"]("" + __dirname + "/../public"));

  Table = (function() {
    Table.prototype.id = null;

    Table.prototype.name = null;

    function Table(name, id) {
      this.name = name;
      this.id = id;
    }

    Table.prototype.players = function() {
      var _ref;
      return Object.keys((_ref = io.sockets.adapter.rooms[this.id]) != null ? _ref : {});
    };

    Table.prototype.full = function() {
      return this.players().length === 4;
    };

    Table.prototype.data = function() {
      return {
        id: this.id,
        name: this.name,
        players: this.players(),
        full: this.full()
      };
    };

    return Table;

  })();

  tables = (((_ref = process.env.TABLES) != null ? _ref.split(",") : void 0) || [1, 2, 3]).map(function(name, id) {
    return new Table(name, id);
  });

  data = function() {
    var table, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = tables.length; _i < _len; _i++) {
      table = tables[_i];
      _results.push(table.data());
    }
    return _results;
  };

  io.on("connect", function(socket) {
    socket.emit("data", data());
    socket.on("join", function(id) {
      if (!tables[id].full()) {
        socket.join(id);
        io.emit("data", data());
        if (tables[id].full()) {
          return io.to(id).emit("ready", tables[id].name);
        }
      }
    });
    socket.on("leave", function(id) {
      socket.leave(id);
      return io.emit("data", data());
    });
    return socket.on("disconnect", function() {
      return io.emit("data", data());
    });
  });

  server.listen(process.env.PORT || 3000);

}).call(this);
